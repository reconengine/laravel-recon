<?php

namespace Recon\Tests\Interactions;

use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Illuminate\Testing\Assert;
use Recon\Helpers\InteractionBuilder;
use Recon\Tests\BaseTest;
use Recon\Tests\Models\TestModelItem;

class InteractionBuilderTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config([
            'recon' => [
                'database' => '::database::',
            ]
        ]);
    }

    // defaults
    /** @test */
    public function interactionBuilderWillSendHttpRequestDefault()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        $interaction = (new InteractionBuilder('click'));
        $interactionResponse = $interaction->send();

        Http::assertSent(function (Request $request) use ($interaction) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === 'abc'
                && $request['interactions'][0]['type'] === 'click'
                && $request['interactions'][0]['uid'] === null
                && $request['interactions'][0]['timestamp'] === $interaction->timestamp
                && $request['interactions'][0]['value'] === null
                && $request['interactions'][0]['iid'] === null
                && $request['interactions'][0]['impressions'] === null
                && $request['interactions'][0]['metadata'] === null
                && $request['interactions'][0]['recommendation_id'] === null;
        });
    }

    // custom
    public function interactionBuilderWillSendHttpRequestCustom()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        // can it be int and string? packing 2 tests in 1. I know they say you shouldn't do it.
        $interaction = (new InteractionBuilder('click'))
            ->setImpressions([154, '134'])
            ->setValue(14.5)
            ->setTimestamp(now()->midDay())
            ->setUserId(1534)
            ->setItemId(9423)
            ->setSessionId('::session::')
            ->setAction('::action::')
            ->setRecommendationId('::rec_id::')
            ->setMetadata([
                'duration' => 156,
                'genres' => 'Trap|Wrap|Many',
            ]);
        $interactionResponse = $interaction->send();

        Http::assertSent(function (Request $request) use ($interaction) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === '::session::'
                && $request['interactions'][0]['type'] === '::action::'
                && $request['interactions'][0]['timestamp'] === now()->midDay()->timestamp
                && $request['interactions'][0]['value'] === 14.5
                && $request['interactions'][0]['iid'] === 9423
                && $request['interactions'][0]['uid'] === 1534
                && $request['interactions'][0]['impressions'] === [154, '134']
                && $request['interactions'][0]['metadata'] === [
                    'duration' => 156,
                    'genres' => 'Trap|Wrap|Many',
                ]
                && $request['interactions'][0]['recommendation_id'] === "::rec_id::";
        });
    }

    // batch testing
    /** @test */
    public function interactionBuilderWillSendBatchHttpRequestWithCollection()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        $interaction1 = (new InteractionBuilder('click'));
        $interaction2 = (new InteractionBuilder('view'));
        InteractionBuilder::sendBatch(collect([
            $interaction1,
            $interaction2,
        ]));

        Http::assertSent(function (Request $request) use ($interaction1, $interaction2) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === 'abc'
                && $request['interactions'][0]['type'] === 'click'
                && $request['interactions'][0]['uid'] === null
                && $request['interactions'][0]['timestamp'] === $interaction1->timestamp
                && $request['interactions'][0]['value'] === null
                && $request['interactions'][0]['iid'] === null
                && $request['interactions'][0]['impressions'] === null
                && $request['interactions'][0]['metadata'] === null
                && $request['interactions'][0]['recommendation_id'] === null
                && $request['interactions'][1]['session_id'] === 'abc'
                && $request['interactions'][1]['type'] === 'view'
                && $request['interactions'][1]['uid'] === null
                && $request['interactions'][1]['timestamp'] === $interaction2->timestamp
                && $request['interactions'][1]['value'] === null
                && $request['interactions'][1]['iid'] === null
                && $request['interactions'][1]['impressions'] === null
                && $request['interactions'][1]['metadata'] === null
                && $request['interactions'][1]['recommendation_id'] === null;
        });
    }

    /** @test */
    public function interactionBuilderWillSendBatchHttpRequestWithArray()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        $interaction1 = (new InteractionBuilder('click'));
        $interaction2 = (new InteractionBuilder('view'));
        InteractionBuilder::sendBatch([
            $interaction1,
            $interaction2,
        ]);

        Http::assertSent(function (Request $request) use ($interaction1, $interaction2) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === 'abc'
                && $request['interactions'][0]['type'] === 'click'
                && $request['interactions'][0]['uid'] === null
                && $request['interactions'][0]['timestamp'] === $interaction1->timestamp
                && $request['interactions'][0]['value'] === null
                && $request['interactions'][0]['iid'] === null
                && $request['interactions'][0]['impressions'] === null
                && $request['interactions'][0]['metadata'] === null
                && $request['interactions'][0]['recommendation_id'] === null
                && $request['interactions'][1]['session_id'] === 'abc'
                && $request['interactions'][1]['type'] === 'view'
                && $request['interactions'][1]['uid'] === null
                && $request['interactions'][1]['timestamp'] === $interaction2->timestamp
                && $request['interactions'][1]['value'] === null
                && $request['interactions'][1]['iid'] === null
                && $request['interactions'][1]['impressions'] === null
                && $request['interactions'][1]['metadata'] === null
                && $request['interactions'][1]['recommendation_id'] === null;
        });
    }

    /** @test */
    public function interactionBuilderWillSendBatchHttpRequestWithInstance()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        $interaction1 = (new InteractionBuilder('click'));
        InteractionBuilder::sendBatch(
            $interaction1
        );

        Http::assertSent(function (Request $request) use ($interaction1) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === 'abc'
                && $request['interactions'][0]['type'] === 'click'
                && $request['interactions'][0]['uid'] === null
                && $request['interactions'][0]['timestamp'] === $interaction1->timestamp
                && $request['interactions'][0]['value'] === null
                && $request['interactions'][0]['iid'] === null
                && $request['interactions'][0]['impressions'] === null
                && $request['interactions'][0]['metadata'] === null
                && $request['interactions'][0]['recommendation_id'] === null;
        });
    }

    /** @test */
    public function interactionBuilderWillSendBatchHttpRequestWithSingularParams()
    {
        Http::fake();

        Session::shouldReceive('getId')->andReturn('abc');

        $interaction1 = (new InteractionBuilder('click'));
        $interaction2 = (new InteractionBuilder('view'));
        InteractionBuilder::sendBatch(
            $interaction1,
            $interaction2
        );

        Http::assertSent(function (Request $request) use ($interaction1, $interaction2) {
            return Str::contains($request->url(), ['/api/databases/::database::/interactions'])
                && $request->method() === 'POST'
                && $request['interactions'][0]['session_id'] === 'abc'
                && $request['interactions'][0]['type'] === 'click'
                && $request['interactions'][0]['uid'] === null
                && $request['interactions'][0]['timestamp'] === $interaction1->timestamp
                && $request['interactions'][0]['value'] === null
                && $request['interactions'][0]['iid'] === null
                && $request['interactions'][0]['impressions'] === null
                && $request['interactions'][0]['metadata'] === null
                && $request['interactions'][0]['recommendation_id'] === null
                && $request['interactions'][1]['session_id'] === 'abc'
                && $request['interactions'][1]['type'] === 'view'
                && $request['interactions'][1]['uid'] === null
                && $request['interactions'][1]['timestamp'] === $interaction2->timestamp
                && $request['interactions'][1]['value'] === null
                && $request['interactions'][1]['iid'] === null
                && $request['interactions'][1]['impressions'] === null
                && $request['interactions'][1]['metadata'] === null
                && $request['interactions'][1]['recommendation_id'] === null;
        });
    }
}
