<?php


namespace Recon\Tests\ModelTests;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Queue;
use Illuminate\Support\Str;
use Recon\Api\Api;
use Recon\Events\ModelsImported;
use Recon\Helpers\SchemaDefinition;
use Recon\Jobs\MakeTrainableJob;
use Recon\ReconItem;
use Recon\Tests\BaseTest;
use Recon\Tests\Models\TestModelItem;
use Recon\Tests\Models\TestModelUser;

class ModelScopeTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config([
            'recon' => [
                'database' => '::database::',
            ],
        ]);
    }

    public function testSingleModelTrainable()
    {
        Http::fake();

        $testModel = TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        $testModel->color = 'red'; // helpful to confirm false positive
        $testModel->trainable();

        Http::assertSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/::database::/items'])
                && $request->method() === 'POST'
                && $request['items'][0]['iid'] === $testModel->id
                && $request['items'][0]['metadata'] === [
                    'color' => 'red',
                    'rating' => 4.45,
                    'ratings' => 132,
                ];
        });
    }

    public function testSingleModelTrainableEloquentQuery()
    {
        Http::fake();

        $testModel1 = TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);
        $testModel2 = TestModelItem::create([
            'color' => 'red',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        TestModelItem::query()->trainable();

        Http::assertSent(function (Request $request) use ($testModel1, $testModel2) {
            return Str::contains($request->url(), ['/api/databases/::database::/items'])
                && $request->method() === 'POST'
                && sizeof($request['items']) === 2
                && $request['items'][0]['iid'] === $testModel1->id
                && $request['items'][0]['metadata'] === [
                    'color' => 'green',
                    'rating' => 4.45,
                    'ratings' => 132,
                ]
                && $request['items'][1]['iid'] === $testModel2->id
                && $request['items'][1]['metadata'] === [
                    'color' => 'red',
                    'rating' => 4.45,
                    'ratings' => 132,
                ];
        });
    }

    public function testSingleModelTrainableCollectioon()
    {
        Http::fake();

        $testModel1 = TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);
        $testModel2 = TestModelItem::create([
            'color' => 'red',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        TestModelItem::get()->trainable();

        Http::assertSent(function (Request $request) use ($testModel1, $testModel2) {
            return Str::contains($request->url(), ['/api/databases/::database::/items'])
                && $request->method() === 'POST'
                && sizeof($request['items']) === 2
                && $request['items'][0]['iid'] === $testModel1->id
                && $request['items'][0]['metadata'] === [
                    'color' => 'green',
                    'rating' => 4.45,
                    'ratings' => 132,
                ]
                && $request['items'][1]['iid'] === $testModel2->id
                && $request['items'][1]['metadata'] === [
                    'color' => 'red',
                    'rating' => 4.45,
                    'ratings' => 132,
                ];
        });
    }

    public function testQueueSettingIsRespected()
    {
        Queue::fake();

        Http::fake();

        config([
            'recon' => [
                'queue' => false,
            ],
        ]);

        TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        Queue::assertNotPushed(MakeTrainableJob::class);

        config([
            'recon' => [
                'queue' => true,
            ],
        ]);

        TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        Queue::assertPushed(MakeTrainableJob::class);
    }

    public function testTrainableWillDispatchEvents()
    {
        Http::fake();

        $item = TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        Event::fake();

        TestModelItem::makeAllTrainable();

        Event::assertDispatched(function (ModelsImported $event) use ($item) {
            return $event->models->count() === 1 && $item->is($event->models->first());
        });
    }
}
